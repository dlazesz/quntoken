token {
    ANYCHAR;
    FAILURE;
}


start = PROGRAM;

mode PROGRAM {
    // (WORD or PUNCT) + NONWS
    {WORD_OPEN_QX}{BASE_CLASS}+{WORD_CLOSE_QX}/({WORD_OPEN_QX}|{PUNCT_OPEN_QX}) {
                        self_send2(QUEX_TKN_ANYCHAR, LexemeBegin + 1, LexemeEnd -1);
                        self_send1(QUEX_TKN_ANYCHAR, L"\t\"\"\n");
    }
    {PUNCT_OPEN_QX}{BASE_CLASS}+{PUNCT_CLOSE_QX}/({WORD_OPEN_QX}|{PUNCT_OPEN_QX}) {
                        self_send2(QUEX_TKN_ANYCHAR, LexemeBegin + 1, LexemeEnd -1);
                        self_send1(QUEX_TKN_ANYCHAR, L"\t\"\"\n");
    }

    // (WORD or PUNCT) + WS + mondatvege + WS
    {WORD_OPEN_QX}{BASE_CLASS}+{WORD_CLOSE_QX}/{TAGGED_WS_SEQ}{SNT_CLOSE_QX}{TAGGED_WS_SEQ} {
                        self_send2(QUEX_TKN_ANYCHAR, LexemeBegin + 1, LexemeEnd -1);
                        self_send1(QUEX_TKN_ANYCHAR, L"\t");
                        // std::wcerr << L"PROGRAM: WORD+WS+SNTEND+WS -> WSHACK" << std::endl;
                        self << WSHACK;
    }
    {PUNCT_OPEN_QX}{BASE_CLASS}+{PUNCT_CLOSE_QX}/{TAGGED_WS_SEQ}{SNT_CLOSE_QX}{TAGGED_WS_SEQ} {
                        self_send2(QUEX_TKN_ANYCHAR, LexemeBegin + 1, LexemeEnd -1);
                        self_send1(QUEX_TKN_ANYCHAR, L"\t");
                        // std::wcerr << L"PROGRAM: PUNCT+WS+SNTEND+WS -> WSHACK" << std::endl;
                        self << WSHACK;
    }

    // (WORD or PUNCT) + WS
    {WORD_OPEN_QX}{BASE_CLASS}+{WORD_CLOSE_QX} {
                        self_send2(QUEX_TKN_ANYCHAR, LexemeBegin + 1, LexemeEnd -1);
                        self_send1(QUEX_TKN_ANYCHAR, L"\t");
    }
    {PUNCT_OPEN_QX}{BASE_CLASS}+{PUNCT_CLOSE_QX} {
                        self_send2(QUEX_TKN_ANYCHAR, LexemeBegin + 1, LexemeEnd -1);
                        self_send1(QUEX_TKN_ANYCHAR, L"\t");
    }

    // mondat vege + WS
    {SNT_CLOSE_QX}{TAGGED_WS_SEQ} {
        // std::wcerr << L"PROGRAM: SNTEND + WS" << std::endl;
        std::wstring LEX(LexemeBegin+2, LexemeEnd-1);
        self.escape_ws(LEX);
        self_send1(QUEX_TKN_ANYCHAR, L"\"");
        self_send1(QUEX_TKN_ANYCHAR, LEX.c_str());
        self_send1(QUEX_TKN_ANYCHAR, L"\"\n\n");
    }

    // mondat vege (ws nelkul)
    {SNT_CLOSE_QX}/.       {
        // std::wcerr << L"PROGRAM: SNTEND ..." << std::endl;
        self_send1(QUEX_TKN_ANYCHAR, L"\"\"\n\n");
    }
    {SNT_CLOSE_QX}$       {
        // std::wcerr << L"PROGRAM: SNTEND + $" << std::endl;
        self_send1(QUEX_TKN_ANYCHAR, L"\"\"\n\n");
    }
    {TAGGED_WS_SEQ}/{SNT_CLOSE_QX}{WSPACE}*/       {
        // std::wcerr << L"PROGRAM: {TAGGED_WS_SEQ}/ SNTEND {WSPACE}*" << std::endl;
        self_send1(QUEX_TKN_ANYCHAR, L"\n");
    }
    {SNT_CLOSE_QX}{WSPACE}*       { // EOF
        // std::wcerr << L"PROGRAM: SNTEND + EOF" << std::endl;
        self_send1(QUEX_TKN_ANYCHAR, L"\"\"\n\n");
    }

    // WS
    ^{TAGGED_WS_SEQ} {}
    {TAGGED_WS_SEQ} {
        std::wstring LEX(LexemeBegin+1, LexemeEnd -1);
        self.escape_ws(LEX);
        self_send1(QUEX_TKN_ANYCHAR, L"\"");
        self_send1(QUEX_TKN_ANYCHAR, LEX.c_str());
        self_send1(QUEX_TKN_ANYCHAR, L"\"\n");
    }

    // mondat eleje
    {SNT_OPEN_QX}       {}

    <<FAIL>>            => QUEX_TKN_FAILURE(Lexeme);
    <<EOF>>             => QUEX_TKN_TERMINATION;
}

mode WSHACK {
    {TAGGED_WS_SEQ}{SNT_CLOSE_QX}/{TAGGED_WS_SEQ} {
        // std::wcerr << L"WSHACK: TAGGED_WS_SEQ + SNT_CLOSE_QX" << std::endl;
        self_send1(QUEX_TKN_ANYCHAR, L"\"");
        std::wstring LEX(LexemeBegin+1, LexemeEnd -2);
        self.escape_ws(LEX);
        self_send1(QUEX_TKN_ANYCHAR, LEX.c_str());
    }

    {TAGGED_WS_SEQ} {
        // std::wcerr << L"WSHACK: TAGGED_WS_SEQ" << std::endl;
        std::wstring LEX(LexemeBegin+1, LexemeEnd -1);
        self.escape_ws(LEX);
        self_send1(QUEX_TKN_ANYCHAR, LEX.c_str());
        self_send1(QUEX_TKN_ANYCHAR, L"\"\n\n");
        self << PROGRAM;
    }

    <<FAIL>>            => QUEX_TKN_FAILURE(Lexeme);
    <<EOF>>             => QUEX_TKN_TERMINATION;
}
